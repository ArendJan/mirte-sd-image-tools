Bootstrap: docker
From: ubuntu:bionic

%files
    scripts/mount_image.sh /
    scripts/umount_image.sh /
    scripts/install_zoef.sh /
    scripts/resize_image.sh /

%post
    # Update system
    apt update

    # Install locales
    apt install -y locales
    locale-gen "nl_NL.UTF-8"
    locale-gen "en_US.UTF-8"
    update-locale LC_ALL=en_US.UTF-8 LANGUAGE=en_US.UTF-8

    # Install prerequisites
    apt install -y qemu qemu-user-static binfmt-support xz-utils wget parted git

    # Download latest armbian image
    wget https://cdimage.ubuntu.com/releases/18.04.5/release/ubuntu-18.04.5-preinstalled-server-armhf+raspi3.img.xz -P /
    unxz *.xz
    mv *.img zoef_sd.img

    # Resize image and partition to a total of 6Gb
    # If this one grows too big one could encounter problems with the size of singularity image
    dd if=/dev/zero bs=1G seek=6 count=0 of=/zoef_sd.img
    #dd if=/dev/zero bs=1MiB of=zoef_sd.img conv=notrunc oflag=append count=5000

    # Resize partition
    loopvar=`losetup -f --show zoef_sd.img`
    parted $loopvar resizepart 2 100%
    losetup -d $loopvar

    # Resize filesystem (TODO: call mount and umount scripts?)
    loopvar=`losetup -fP --show zoef_sd.img`
    mkdir -p /mnt/armbian
    mount `ls $loopvar* | tail -n1` /mnt/armbian/
    losetup -c $loopvar
    resize2fs -f `ls $loopvar* | tail -n1`
    umount /mnt/armbian/
    losetup -d $loopvar

    # Setting permissions on scripts
    chmod +x /mount_image.sh /umount_image.sh /install_zoef.sh /resize_image.sh
    mkdir /working_dir

    # Installing the yaml merge script
    apt install -y make build-essential 
    cpan -fi YAML Hash::Merge::Simple 

    # Fix needed to get internet while installing raspberry pi image
    loopvar=`losetup -fP --show zoef_sd.img`
    mount `ls $loopvar* | tail -n1` /mnt/armbian/
    mkdir -p /mnt/armbian/run/systemd/resolve/
    echo 'nameserver 8.8.4.4' | tee -a /mnt/armbian/run/systemd/resolve/stub-resolv.conf
    umount /mnt/armbian/
    losetup -d $loopvar

%runscript
    /mount_image.sh && cp -R /working_dir /mnt/armbian 2> /dev/null || /bin/true

%apprun shell
    /mount_image.sh && cp -R /working_dir /mnt/armbian 2> /dev/null || /bin/true && chroot /mnt/armbian
